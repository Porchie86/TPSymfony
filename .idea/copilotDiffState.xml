<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/public/favicon.svg">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/public/favicon.svg" />
              <option name="updatedContent" value="&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;64&quot; height=&quot;64&quot; viewBox=&quot;0 0 64 64&quot; role=&quot;img&quot; aria-label=&quot;Bucket-List&quot;&gt;&#10;  &lt;defs&gt;&#10;    &lt;linearGradient id=&quot;g&quot; x1=&quot;0&quot; x2=&quot;1&quot; y1=&quot;0&quot; y2=&quot;1&quot;&gt;&#10;      &lt;stop offset=&quot;0%&quot; stop-color=&quot;#0d6efd&quot;/&gt;&#10;      &lt;stop offset=&quot;100%&quot; stop-color=&quot;#20c997&quot;/&gt;&#10;    &lt;/linearGradient&gt;&#10;  &lt;/defs&gt;&#10;  &lt;rect rx=&quot;12&quot; ry=&quot;12&quot; width=&quot;64&quot; height=&quot;64&quot; fill=&quot;url(#g)&quot;/&gt;&#10;  &lt;path d=&quot;M20 22h24l-2 22a8 8 0 0 1-8 7h-4a8 8 0 0 1-8-7z&quot; fill=&quot;none&quot; stroke=&quot;#fff&quot; stroke-width=&quot;4&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;&#10;  &lt;path d=&quot;M26 32l6 6 10-10&quot; fill=&quot;none&quot; stroke=&quot;#fff&quot; stroke-width=&quot;4&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;/&gt;&#10;&lt;/svg&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Controller/WishController.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Controller/WishController.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Controller;&#10;&#10;use App\Entity\Wish;&#10;use App\Form\WishType;&#10;use App\Repository\WishRepository;&#10;use App\Repository\CategoryRepository;&#10;use App\Services\FileManager;&#10;use App\Services\Censurator;&#10;use Doctrine\ORM\EntityManagerInterface;&#10;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;&#10;use Symfony\Component\HttpFoundation\File\UploadedFile;&#10;use Symfony\Component\HttpFoundation\Request;&#10;use Symfony\Component\HttpFoundation\Response;&#10;use Symfony\Component\Routing\Attribute\Route;&#10;use Symfony\Component\String\Slugger\SluggerInterface;&#10;use Symfony\Component\HttpFoundation\File\Exception\FileException;&#10;&#10;#[Route('/wishes', name: 'app_wish_')]&#10;final class WishController extends AbstractController&#10;{&#10;    public function __construct(private Censurator $censurator) {}&#10;&#10;    #[Route('', name: 'list', methods: ['GET'])]&#10;    public function list(Request $request, WishRepository $wishRepository, CategoryRepository $categoryRepository): Response&#10;    {&#10;        $q = $request-&gt;query-&gt;get('q');&#10;        $author = $request-&gt;query-&gt;get('author');&#10;        $category = $request-&gt;query-&gt;get('category');&#10;        $order = $request-&gt;query-&gt;get('order', 'DESC');&#10;&#10;        $categoryId = $category !== null &amp;&amp; $category !== '' ? (int) $category : null;&#10;&#10;        $wishes = $wishRepository-&gt;searchPublished($q, $author, $categoryId, $order);&#10;        $authors = $wishRepository-&gt;getPublishedAuthors();&#10;        $categories = $categoryRepository-&gt;findBy([], ['name' =&gt; 'ASC']);&#10;&#10;        return $this-&gt;render('wish/list.html.twig', [&#10;            'wishes' =&gt; $wishes,&#10;            'q' =&gt; $q,&#10;            'author' =&gt; $author,&#10;            'order' =&gt; strtoupper($order) === 'ASC' ? 'ASC' : 'DESC',&#10;            'authors' =&gt; $authors,&#10;            'categories' =&gt; $categories,&#10;            'category' =&gt; $categoryId,&#10;        ]);&#10;    }&#10;&#10;    #[Route('/{id}', name: 'detail', requirements: ['id' =&gt; '\d+'], methods: ['GET', 'POST'])]&#10;    public function detail(Wish $wish = null, Request $request, EntityManagerInterface $em): Response&#10;    {&#10;        if (!$wish) {&#10;            throw $this-&gt;createNotFoundException('Idée introuvable');&#10;        }&#10;&#10;        $commentForm = null;&#10;        $user = $this-&gt;getUser();&#10;        $isAuthor = $user &amp;&amp; $wish-&gt;getAuthor() === $user-&gt;getPseudo();&#10;        if ($user &amp;&amp; !$isAuthor) {&#10;            $comment = new \App\Entity\Comment();&#10;            $form = $this-&gt;createForm(\App\Form\CommentType::class, $comment);&#10;            $form-&gt;handleRequest($request);&#10;            if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {&#10;                $comment-&gt;setWish($wish);&#10;                $comment-&gt;setAuthor($user);&#10;                $comment-&gt;setCreatedAt(new \DateTime());&#10;                $em-&gt;persist($comment);&#10;                $em-&gt;flush();&#10;                $this-&gt;addFlash('success', 'Commentaire ajouté !');&#10;                return $this-&gt;redirectToRoute('app_wish_detail', ['id' =&gt; $wish-&gt;getId()]);&#10;            }&#10;            $commentForm = $form-&gt;createView();&#10;        }&#10;&#10;        return $this-&gt;render('wish/show.html.twig', [&#10;            'wish' =&gt; $wish,&#10;            'commentForm' =&gt; $commentForm,&#10;            'isAuthor' =&gt; $isAuthor,&#10;        ]);&#10;    }&#10;&#10;    // Formulaire de création d'une idée&#10;    #[Route('/formWish', name: 'formWish', methods: ['GET', 'POST'])]&#10;    public function new(Request $request, EntityManagerInterface $em, FileManager $fileManager): Response&#10;    {&#10;        $user = $this-&gt;getUser();&#10;&#10;        $wish = new Wish();&#10;        $wish-&gt;setAuthor($user?-&gt;getPseudo() ?? 'Anonyme');&#10;        $form = $this-&gt;createForm(WishType::class, $wish);&#10;        $form-&gt;handleRequest($request);&#10;&#10;&#10;        if ($form-&gt;isSubmitted()){&#10;            if($form-&gt;isValid()) {&#10;                // Censor the title and description before saving&#10;                // Debugging: Log the original and censored values&#10;                $originalTitle = $wish-&gt;getTitle();&#10;                $originalDescription = $wish-&gt;getDescription();&#10;                $originalAuthor = $wish-&gt;getAuthor();&#10;&#10;                $censoredTitle = $this-&gt;censurator-&gt;purify($originalTitle);&#10;                $wish-&gt;setTitle($censoredTitle);&#10;&#10;                $censoredDescription = $this-&gt;censurator-&gt;purify($originalDescription);&#10;                $wish-&gt;setDescription($censoredDescription);&#10;&#10;                $censoredAuthor = $this-&gt;censurator-&gt;purify($originalAuthor);&#10;                $wish-&gt;setAuthor($censoredAuthor);&#10;&#10;                if ($wish-&gt;getImage()) {&#10;                    $originalImage = $wish-&gt;getImage();&#10;                    $censoredImage = $this-&gt;censurator-&gt;purify($originalImage);&#10;                    $wish-&gt;setImage($censoredImage);&#10;                }&#10;&#10;                // Log the changes to the browser console&#10;                echo &quot;&lt;script&gt;console.log('Original Title: &quot; . addslashes($originalTitle) . &quot;');&lt;/script&gt;&quot;;&#10;                echo &quot;&lt;script&gt;console.log('Censored Title: &quot; . addslashes($censoredTitle) . &quot;');&lt;/script&gt;&quot;;&#10;                echo &quot;&lt;script&gt;console.log('Original Description: &quot; . addslashes($originalDescription) . &quot;');&lt;/script&gt;&quot;;&#10;                echo &quot;&lt;script&gt;console.log('Censored Description: &quot; . addslashes($censoredDescription) . &quot;');&lt;/script&gt;&quot;;&#10;                echo &quot;&lt;script&gt;console.log('Original Author: &quot; . addslashes($originalAuthor) . &quot;');&lt;/script&gt;&quot;;&#10;                echo &quot;&lt;script&gt;console.log('Censored Author: &quot; . addslashes($censoredAuthor) . &quot;');&lt;/script&gt;&quot;;&#10;&#10;                $file = $form-&gt;get('image')-&gt;getData();&#10;                if ($file instanceof UploadedFile) {&#10;                    if ($name = $fileManager-&gt;upload($file, 'uploads', $form-&gt;get('image')-&gt;getName())) {&#10;                        $wish-&gt;setImage($name);&#10;                    }&#10;                }&#10;&#10;                $em-&gt;persist($wish);&#10;                $em-&gt;flush();&#10;&#10;                $this-&gt;addFlash('success', 'Idée créée avec succès.');&#10;                return $this-&gt;redirectToRoute('app_wish_detail', ['id' =&gt; $wish-&gt;getId()]);&#10;            }&#10;        }&#10;&#10;        if ($form-&gt;isSubmitted() &amp;&amp; !$form-&gt;isValid()) {&#10;            $this-&gt;addFlash('error', 'Le formulaire contient des erreurs.');&#10;            return $this-&gt;render('wish/formWish.html.twig', [&#10;                'form' =&gt; $form-&gt;createView(),&#10;                'is_edit' =&gt; false,&#10;            ], new Response(null, 422));&#10;        }&#10;&#10;        return $this-&gt;render('wish/formWish.html.twig', [&#10;            'form' =&gt; $form-&gt;createView(),&#10;            'is_edit' =&gt; false,&#10;        ]);&#10;    }&#10;&#10;&#10;    // Formulaire d'édition d'une idée&#10;    #[Route('/{id}/edit', name: 'edit', requirements: ['id' =&gt; '\\d+'], methods: ['GET', 'POST'])]&#10;    public function edit(Request $request, Wish $wish = null, EntityManagerInterface $em, FileManager $fileManager): Response&#10;    {&#10;        if (!$wish) {&#10;            throw $this-&gt;createNotFoundException('Idée introuvable');&#10;        }&#10;&#10;        $user = $this-&gt;getUser();&#10;        $isAuthor = $user &amp;&amp; $wish-&gt;getAuthor() === $user-&gt;getPseudo();&#10;        if (!$isAuthor) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez modifier que vos propres idées.');&#10;        }&#10;&#10;        $form = $this-&gt;createForm(WishType::class, $wish);&#10;        $form-&gt;handleRequest($request);&#10;&#10;        if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {&#10;            $file = $form-&gt;get('image')-&gt;getData();&#10;            if ($file instanceof UploadedFile) {&#10;                if ($name = $fileManager-&gt;upload($file, 'uploads', $form-&gt;get('image')-&gt;getName(), $wish-&gt;getImage())) {&#10;                    $wish-&gt;setImage($name);&#10;                }&#10;            }&#10;&#10;            $wish-&gt;setDateUpdated(new \DateTime());&#10;            $em-&gt;flush();&#10;            $this-&gt;addFlash('success', 'Idée mise à jour.');&#10;&#10;            return $this-&gt;redirectToRoute('app_wish_detail', ['id' =&gt; $wish-&gt;getId()]);&#10;        }&#10;&#10;        if ($form-&gt;isSubmitted() &amp;&amp; !$form-&gt;isValid()) {&#10;            $this-&gt;addFlash('error', 'Le formulaire contient des erreurs.');&#10;            return $this-&gt;render('wish/formWish.html.twig', [&#10;                'form' =&gt; $form-&gt;createView(),&#10;                'is_edit' =&gt; true,&#10;            ], new Response(null, 422));&#10;        }&#10;&#10;        return $this-&gt;render('wish/formWish.html.twig', [&#10;            'form' =&gt; $form-&gt;createView(),&#10;            'is_edit' =&gt; true,&#10;        ]);&#10;    }&#10;&#10;    // Suppression d'une idée (POST + CSRF)&#10;    #[Route('/{id}/delete', name: 'delete', requirements: ['id' =&gt; '\\d+'], methods: ['POST'])]&#10;    public function delete(Request $request, Wish $wish = null, EntityManagerInterface $em): Response&#10;    {&#10;        if (!$wish) {&#10;            throw $this-&gt;createNotFoundException('Idée introuvable');&#10;        }&#10;&#10;        $user = $this-&gt;getUser();&#10;        $isAuthor = $user &amp;&amp; $wish-&gt;getAuthor() === $user-&gt;getPseudo();&#10;        $isAdmin = $user &amp;&amp; method_exists($user, 'isAdmin') &amp;&amp; $user-&gt;isAdmin();&#10;        if (!$isAuthor &amp;&amp; !$isAdmin) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez supprimer que vos propres idées ou être administrateur.');&#10;        }&#10;&#10;        $token = $request-&gt;request-&gt;get('_token');&#10;        if (!$this-&gt;isCsrfTokenValid('delete_wish_' . $wish-&gt;getId(), $token)) {&#10;            $this-&gt;addFlash('error', 'Jeton CSRF invalide.');&#10;            return $this-&gt;redirectToRoute('app_wish_detail', ['id' =&gt; $wish-&gt;getId()]);&#10;        }&#10;&#10;        $em-&gt;remove($wish);&#10;        $em-&gt;flush();&#10;        $this-&gt;addFlash('success', 'Idée supprimée.');&#10;&#10;        return $this-&gt;redirectToRoute('app_wish_list');&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Controller;&#10;&#10;use App\Entity\Wish;&#10;use App\Form\WishType;&#10;use App\Repository\WishRepository;&#10;use App\Repository\CategoryRepository;&#10;use App\Services\FileManager;&#10;use App\Services\Censurator;&#10;use Doctrine\ORM\EntityManagerInterface;&#10;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;&#10;use Symfony\Component\HttpFoundation\File\UploadedFile;&#10;use Symfony\Component\HttpFoundation\Request;&#10;use Symfony\Component\HttpFoundation\Response;&#10;use Symfony\Component\Routing\Attribute\Route;&#10;use Symfony\Component\String\Slugger\SluggerInterface;&#10;use Symfony\Component\HttpFoundation\File\Exception\FileException;&#10;&#10;#[Route('/wishes', name: 'app_wish_')]&#10;final class WishController extends AbstractController&#10;{&#10;    public function __construct(private Censurator $censurator) {}&#10;&#10;    #[Route('', name: 'list', methods: ['GET'])]&#10;    public function list(Request $request, WishRepository $wishRepository, CategoryRepository $categoryRepository): Response&#10;    {&#10;        $q = $request-&gt;query-&gt;get('q');&#10;        $author = $request-&gt;query-&gt;get('author');&#10;        $category = $request-&gt;query-&gt;get('category');&#10;        $order = $request-&gt;query-&gt;get('order', 'DESC');&#10;&#10;        $categoryId = $category !== null &amp;&amp; $category !== '' ? (int) $category : null;&#10;&#10;        $wishes = $wishRepository-&gt;searchPublished($q, $author, $categoryId, $order);&#10;        $authors = $wishRepository-&gt;getPublishedAuthors();&#10;        $categories = $categoryRepository-&gt;findBy([], ['name' =&gt; 'ASC']);&#10;&#10;        return $this-&gt;render('wish/list.html.twig', [&#10;            'wishes' =&gt; $wishes,&#10;            'q' =&gt; $q,&#10;            'author' =&gt; $author,&#10;            'order' =&gt; strtoupper($order) === 'ASC' ? 'ASC' : 'DESC',&#10;            'authors' =&gt; $authors,&#10;            'categories' =&gt; $categories,&#10;            'category' =&gt; $categoryId,&#10;        ]);&#10;    }&#10;&#10;    #[Route('/{id}', name: 'detail', requirements: ['id' =&gt; '\d+'], methods: ['GET', 'POST'])]&#10;    public function detail(Wish $wish = null, Request $request, EntityManagerInterface $em): Response&#10;    {&#10;        if (!$wish) {&#10;            throw $this-&gt;createNotFoundException('Idée introuvable');&#10;        }&#10;&#10;        $commentForm = null;&#10;        $user = $this-&gt;getUser();&#10;        $isAuthor = $user &amp;&amp; $wish-&gt;getAuthor() === $user-&gt;getPseudo();&#10;        if ($user &amp;&amp; !$isAuthor) {&#10;            $comment = new \App\Entity\Comment();&#10;            $form = $this-&gt;createForm(\App\Form\CommentType::class, $comment);&#10;            $form-&gt;handleRequest($request);&#10;            if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {&#10;                $comment-&gt;setWish($wish);&#10;                $comment-&gt;setAuthor($user);&#10;                $comment-&gt;setCreatedAt(new \DateTime());&#10;                $em-&gt;persist($comment);&#10;                $em-&gt;flush();&#10;                $this-&gt;addFlash('success', 'Commentaire ajouté !');&#10;                return $this-&gt;redirectToRoute('app_wish_detail', ['id' =&gt; $wish-&gt;getId()]);&#10;            }&#10;            $commentForm = $form-&gt;createView();&#10;        }&#10;&#10;        return $this-&gt;render('wish/show.html.twig', [&#10;            'wish' =&gt; $wish,&#10;            'commentForm' =&gt; $commentForm,&#10;            'isAuthor' =&gt; $isAuthor,&#10;        ]);&#10;    }&#10;&#10;    // Formulaire de création d'une idée&#10;    #[Route('/formWish', name: 'formWish', methods: ['GET', 'POST'])]&#10;    public function new(Request $request, EntityManagerInterface $em, FileManager $fileManager): Response&#10;    {&#10;        $user = $this-&gt;getUser();&#10;&#10;        $wish = new Wish();&#10;        $wish-&gt;setAuthor($user?-&gt;getPseudo() ?? 'Anonyme');&#10;        $form = $this-&gt;createForm(WishType::class, $wish);&#10;        $form-&gt;handleRequest($request);&#10;&#10;&#10;        if ($form-&gt;isSubmitted()){&#10;            if($form-&gt;isValid()) {&#10;                // Censor the title and description before saving&#10;                // Debugging: Log the original and censored values&#10;                $originalTitle = $wish-&gt;getTitle();&#10;                $originalDescription = $wish-&gt;getDescription();&#10;                $originalAuthor = $wish-&gt;getAuthor();&#10;&#10;                $censoredTitle = $this-&gt;censurator-&gt;purify($originalTitle);&#10;                $wish-&gt;setTitle($censoredTitle);&#10;&#10;                $censoredDescription = $this-&gt;censurator-&gt;purify($originalDescription);&#10;                $wish-&gt;setDescription($censoredDescription);&#10;&#10;                $censoredAuthor = $this-&gt;censurator-&gt;purify($originalAuthor);&#10;                $wish-&gt;setAuthor($censoredAuthor);&#10;&#10;                if ($wish-&gt;getImage()) {&#10;                    $originalImage = $wish-&gt;getImage();&#10;                    $censoredImage = $this-&gt;censurator-&gt;purify($originalImage);&#10;                    $wish-&gt;setImage($censoredImage);&#10;                }&#10;&#10;                // Collect logs for browser console&#10;                $consoleLogs = [&#10;                    &quot;Original Title: &quot; . addslashes($originalTitle),&#10;                    &quot;Censored Title: &quot; . addslashes($censoredTitle),&#10;                    &quot;Original Description: &quot; . addslashes($originalDescription),&#10;                    &quot;Censored Description: &quot; . addslashes($censoredDescription),&#10;                    &quot;Original Author: &quot; . addslashes($originalAuthor),&#10;                    &quot;Censored Author: &quot; . addslashes($censoredAuthor),&#10;                ];&#10;&#10;                foreach ($consoleLogs as $log) {&#10;                    $this-&gt;addFlash('console_log', $log);&#10;                }&#10;&#10;                $file = $form-&gt;get('image')-&gt;getData();&#10;                if ($file instanceof UploadedFile) {&#10;                    if ($name = $fileManager-&gt;upload($file, 'uploads', $form-&gt;get('image')-&gt;getName())) {&#10;                        $wish-&gt;setImage($name);&#10;                    }&#10;                }&#10;&#10;                $em-&gt;persist($wish);&#10;                $em-&gt;flush();&#10;&#10;                $this-&gt;addFlash('success', 'Idée créée avec succès.');&#10;                return $this-&gt;redirectToRoute('app_wish_detail', ['id' =&gt; $wish-&gt;getId()]);&#10;            }&#10;        }&#10;&#10;        if ($form-&gt;isSubmitted() &amp;&amp; !$form-&gt;isValid()) {&#10;            $this-&gt;addFlash('error', 'Le formulaire contient des erreurs.');&#10;            return $this-&gt;render('wish/formWish.html.twig', [&#10;                'form' =&gt; $form-&gt;createView(),&#10;                'is_edit' =&gt; false,&#10;            ], new Response(null, 422));&#10;        }&#10;&#10;        return $this-&gt;render('wish/formWish.html.twig', [&#10;            'form' =&gt; $form-&gt;createView(),&#10;            'is_edit' =&gt; false,&#10;        ]);&#10;    }&#10;&#10;&#10;    // Formulaire d'édition d'une idée&#10;    #[Route('/{id}/edit', name: 'edit', requirements: ['id' =&gt; '\\d+'], methods: ['GET', 'POST'])]&#10;    public function edit(Request $request, Wish $wish = null, EntityManagerInterface $em, FileManager $fileManager): Response&#10;    {&#10;        if (!$wish) {&#10;            throw $this-&gt;createNotFoundException('Idée introuvable');&#10;        }&#10;&#10;        $user = $this-&gt;getUser();&#10;        $isAuthor = $user &amp;&amp; $wish-&gt;getAuthor() === $user-&gt;getPseudo();&#10;        if (!$isAuthor) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez modifier que vos propres idées.');&#10;        }&#10;&#10;        $form = $this-&gt;createForm(WishType::class, $wish);&#10;        $form-&gt;handleRequest($request);&#10;&#10;        if ($form-&gt;isSubmitted() &amp;&amp; $form-&gt;isValid()) {&#10;            $file = $form-&gt;get('image')-&gt;getData();&#10;            if ($file instanceof UploadedFile) {&#10;                if ($name = $fileManager-&gt;upload($file, 'uploads', $form-&gt;get('image')-&gt;getName(), $wish-&gt;getImage())) {&#10;                    $wish-&gt;setImage($name);&#10;                }&#10;            }&#10;&#10;            $wish-&gt;setDateUpdated(new \DateTime());&#10;            $em-&gt;flush();&#10;            $this-&gt;addFlash('success', 'Idée mise à jour.');&#10;&#10;            return $this-&gt;redirectToRoute('app_wish_detail', ['id' =&gt; $wish-&gt;getId()]);&#10;        }&#10;&#10;        if ($form-&gt;isSubmitted() &amp;&amp; !$form-&gt;isValid()) {&#10;            $this-&gt;addFlash('error', 'Le formulaire contient des erreurs.');&#10;            return $this-&gt;render('wish/formWish.html.twig', [&#10;                'form' =&gt; $form-&gt;createView(),&#10;                'is_edit' =&gt; true,&#10;            ], new Response(null, 422));&#10;        }&#10;&#10;        return $this-&gt;render('wish/formWish.html.twig', [&#10;            'form' =&gt; $form-&gt;createView(),&#10;            'is_edit' =&gt; true,&#10;        ]);&#10;    }&#10;&#10;    // Suppression d'une idée (POST + CSRF)&#10;    #[Route('/{id}/delete', name: 'delete', requirements: ['id' =&gt; '\\d+'], methods: ['POST'])]&#10;    public function delete(Request $request, Wish $wish = null, EntityManagerInterface $em): Response&#10;    {&#10;        if (!$wish) {&#10;            throw $this-&gt;createNotFoundException('Idée introuvable');&#10;        }&#10;&#10;        $user = $this-&gt;getUser();&#10;        $isAuthor = $user &amp;&amp; $wish-&gt;getAuthor() === $user-&gt;getPseudo();&#10;        $isAdmin = $user &amp;&amp; method_exists($user, 'isAdmin') &amp;&amp; $user-&gt;isAdmin();&#10;        if (!$isAuthor &amp;&amp; !$isAdmin) {&#10;            throw $this-&gt;createAccessDeniedException('Vous ne pouvez supprimer que vos propres idées ou être administrateur.');&#10;        }&#10;&#10;        $token = $request-&gt;request-&gt;get('_token');&#10;        if (!$this-&gt;isCsrfTokenValid('delete_wish_' . $wish-&gt;getId(), $token)) {&#10;            $this-&gt;addFlash('error', 'Jeton CSRF invalide.');&#10;            return $this-&gt;redirectToRoute('app_wish_detail', ['id' =&gt; $wish-&gt;getId()]);&#10;        }&#10;&#10;        $em-&gt;remove($wish);&#10;        $em-&gt;flush();&#10;        $this-&gt;addFlash('success', 'Idée supprimée.');&#10;&#10;        return $this-&gt;redirectToRoute('app_wish_list');&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Services/Censurator.php">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Services/Censurator.php" />
              <option name="originalContent" value="&lt;?php&#10;&#10;namespace App\Services;&#10;&#10;use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;&#10;&#10;class Censurator&#10;{&#10;    private array $offensiveWords;&#10;&#10;    public function __construct(ParameterBagInterface $params)&#10;    {&#10;        $filePath = $params-&gt;get('offensive_words_file');&#10;        $this-&gt;offensiveWords = file($filePath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);&#10;    }&#10;&#10;    public function purify(string $string): string&#10;    {&#10;        foreach ($this-&gt;offensiveWords as $word) {&#10;            $pattern = '/\b' . preg_quote($word, '/') . '(?=\s|$|\W)/iu';&#10;            $replacement = str_repeat('*', mb_strlen($word));&#10;            $string = preg_replace($pattern, $replacement, $string);&#10;        }&#10;&#10;        return $string;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&lt;?php&#10;&#10;namespace App\Services;&#10;&#10;use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;&#10;&#10;class Censurator&#10;{&#10;    private array $offensiveWords;&#10;&#10;    public function __construct(ParameterBagInterface $params)&#10;    {&#10;        $filePath = $params-&gt;get('offensive_words_file');&#10;        $this-&gt;offensiveWords = file($filePath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);&#10;    }&#10;&#10;    public function purify(string $string): string&#10;    {&#10;        foreach ($this-&gt;offensiveWords as $word) {&#10;            $pattern = '/\b' . preg_quote($word, '/') . '(?=\s|$|\W)/iu';&#10;            $replacement = str_repeat('*', mb_strlen($word));&#10;            $string = preg_replace($pattern, $replacement, $string);&#10;        }&#10;&#10;        return $string;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/base.html.twig">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/base.html.twig" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;    &lt;head&gt;&#10;        &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&#10;        &lt;title&gt;{% block title %}Bucket-List{% endblock %}&lt;/title&gt;&#10;        &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;{{ asset('images/favicon.png') }}&quot;&gt;&#10;        {% block stylesheets %}&#10;            &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ asset('vendor/bootstrap/dist/css/bootstrap.min.css') }}&quot;&gt;&#10;            &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ asset('styles/app.css') }}&quot;&gt;&#10;        {% endblock %}&#10;&#10;        {% block javascripts %}&#10;            {% block importmap %}{{ importmap('app') }}{% endblock %}&#10;        {% endblock %}&#10;    &lt;/head&gt;&#10;    &lt;body class=&quot;d-flex flex-column min-vh-100&quot;&gt;&#10;        &lt;div class=&quot;bg-noise&quot;&gt;&lt;/div&gt;&#10;        &lt;header class=&quot;mb-3&quot;&gt;&#10;            {% include 'navbar.html.twig' %}&#10;        &lt;/header&gt;&#10;        &lt;div class=&quot;nav-spacer&quot;&gt;&lt;/div&gt;&#10;&#10;        &lt;main class=&quot;container flex-fill&quot;&gt;&#10;            {# Flash messages (erreurs, succès, infos) #}&#10;            {% for label, messages in app.flashes %}&#10;                {% for message in messages %}&#10;                    &lt;div class=&quot;alert alert-{{ label == 'error' ? 'danger' : (label == 'warning' ? 'warning' : (label == 'success' ? 'success' : 'info')) }} alert-dismissible fade show&quot; role=&quot;alert&quot;&gt;&#10;                        {{ message }}&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;alert&quot; aria-label=&quot;Close&quot;&gt;&lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                {% endfor %}&#10;            {% endfor %}&#10;&#10;            {% block body %}{% endblock %}&#10;        &lt;/main&gt;&#10;&#10;        &lt;footer class=&quot;mt-auto py-3 border-top&quot;&gt;&#10;            &lt;div class=&quot;container text-center text-muted&quot;&gt;&#10;                ©Bucket-List {{ &quot;now&quot;|date('Y') }}&#10;            &lt;/div&gt;&#10;        &lt;/footer&gt;&#10;    &lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;    &lt;head&gt;&#10;        &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&#10;        &lt;title&gt;{% block title %}Bucket-List{% endblock %}&lt;/title&gt;&#10;        &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;{{ asset('images/favicon.png') }}&quot;&gt;&#10;        {% block stylesheets %}&#10;            &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ asset('vendor/bootstrap/dist/css/bootstrap.min.css') }}&quot;&gt;&#10;            &lt;link rel=&quot;stylesheet&quot; href=&quot;{{ asset('styles/app.css') }}&quot;&gt;&#10;        {% endblock %}&#10;&#10;        {% block javascripts %}&#10;            {% block importmap %}{{ importmap('app') }}{% endblock %}&#10;        {% endblock %}&#10;    &lt;/head&gt;&#10;    &lt;body class=&quot;d-flex flex-column min-vh-100&quot;&gt;&#10;        &lt;div class=&quot;bg-noise&quot;&gt;&lt;/div&gt;&#10;        &lt;header class=&quot;mb-3&quot;&gt;&#10;            {% include 'navbar.html.twig' %}&#10;        &lt;/header&gt;&#10;        &lt;div class=&quot;nav-spacer&quot;&gt;&lt;/div&gt;&#10;&#10;        &lt;main class=&quot;container flex-fill&quot;&gt;&#10;            {# Flash messages (erreurs, succès, infos) #}&#10;            {% for label, messages in app.flashes %}&#10;                {% for message in messages %}&#10;                    &lt;div class=&quot;alert alert-{{ label == 'error' ? 'danger' : (label == 'warning' ? 'warning' : (label == 'success' ? 'success' : 'info')) }} alert-dismissible fade show&quot; role=&quot;alert&quot;&gt;&#10;                        {{ message }}&#10;                        &lt;button type=&quot;button&quot; class=&quot;btn-close&quot; data-bs-dismiss=&quot;alert&quot; aria-label=&quot;Close&quot;&gt;&lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                {% endfor %}&#10;            {% endfor %}&#10;&#10;            {% block body %}{% endblock %}&#10;        &lt;/main&gt;&#10;&#10;        &lt;footer class=&quot;mt-auto py-3 border-top&quot;&gt;&#10;            &lt;div class=&quot;container text-center text-muted&quot;&gt;&#10;                ©Bucket-List {{ &quot;now&quot;|date('Y') }}&#10;            &lt;/div&gt;&#10;        &lt;/footer&gt;&#10;    &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>